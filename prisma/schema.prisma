// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String @id @default(uuid())
  email                     String? @unique
  name                      String

  // NULL indicates that the account doesn't expire and the user has signed up
  temporaryAccessExpiresOn  DateTime? @default(dbgenerated("NOW() + '30 days'"))

  ownedWatchGroups  WatchGroup[]
  watchGroups       WatchersOnWatchGroups[]
}

model WatchGroup {
  id        String @id @default(uuid())

  name      String

  owner     User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  watchers  WatchersOnWatchGroups[]
  movies    MoviesOnWatchGroups[]

  createdAt DateTime? @default(now()) @ignore
  updatedAt DateTime? @default(now()) @updatedAt @ignore
}


model WatchersOnWatchGroups {
  watcher       User @relation(fields: [watcherId], references: [id], onDelete: Cascade)
  watcherId     String

  watchGroup    WatchGroup @relation(fields: [watchGroupId], references: [id], onDelete: Cascade)
  watchGroupId  String

  joinedAt      DateTime @default(now()) @ignore

  @@id([watcherId, watchGroupId])
}

model Movie {
  id          String @id @default(uuid())
  name        String
  imdbRating  Decimal
  imdbUrl     String @unique
  imageUrl    String

  watchGroups MoviesOnWatchGroups[]
}

model MoviesOnWatchGroups {
  movie     Movie @relation(fields: [movieId], references: [id], onDelete: Restrict)
  movieId   String

  watchGroup  WatchGroup @relation(fields: [watchGroupId], references: [id], onDelete: Cascade)
  watchGroupId  String

  seenOn  DateTime  @default(now())

  @@id([movieId, watchGroupId])
}
